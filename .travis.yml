language: rust
cache: cargo
rust:
  - stable
  - beta
  - nightly

before_script:
 - if [[ "$INTEGRATION" == "true" ]]; then
     docker pull greenmail/standalone:1.5.8 &&
     docker run -d -e GREENMAIL_OPTS='-Dgreenmail.setup.test.all -Dgreenmail.hostname=0.0.0.0 -Dgreenmail.auth.disabled -Dgreenmail.verbose' -p 3025:3025 -p 3110:3110 -p 3143:3143 -p 3465:3465 -p 3993:3993 -p 3995:3995 greenmail/standalone:1.5.8;
   fi

# an entry in stage=test will be generated for each rust/os combination.
# each entry will run these commands.
script:
  - cargo test --examples
  - cargo test --doc
  - cargo test --lib
jobs:
  allow_failures:
    - rust: nightly
  include:
    - &check
      stage: check # do a pre-screen to make sure this is even worth testing
      script: cargo check --all-targets
      rust: stable
      os: linux
    - <<: *check
      rust: 1.0.0
    - <<: *check
      rust: 1.1.0
    - <<: *check
      rust: 1.2.0
    - <<: *check
      rust: 1.3.0
    - <<: *check
      rust: 1.4.0
    - <<: *check
      rust: 1.5.0
    - <<: *check
      rust: 1.6.0
    - <<: *check
      rust: 1.7.0
    - <<: *check
      rust: 1.8.0
    - <<: *check
      rust: 1.0.0
    - <<: *check
      rust: 1.10.0
    - <<: *check
      rust: 1.11.0
    - <<: *check
      rust: 1.12.1
    - <<: *check
      rust: 1.13.0
    - <<: *check
      rust: 1.14.0
    - <<: *check
      rust: 1.15.1
    - <<: *check
      rust: 1.16.0
    - <<: *check
      rust: 1.17.0
    - <<: *check
      rust: 1.18.0
    - <<: *check
      rust: 1.19.0
    - <<: *check
      rust: 1.20.0
    - <<: *check
      rust: 1.21.0
    - <<: *check
      rust: 1.22.1
    - <<: *check
      rust: 1.23.0
    - <<: *check
      rust: 1.24.1
    - <<: *check
      rust: 1.25.0
    - <<: *check
      rust: 1.26.2
    - <<: *check
      rust: 1.27.2
    - <<: *check
      rust: 1.28.0
    - <<: *check
      rust: 1.29.2
    - <<: *check
      rust: 1.30.1
    - <<: *check
      rust: 1.31.0
    - stage: test
      rust: stable
      os: osx
    - rust: stable
      os: windows
    - &integration
      stage: integration # make integration tests its own stage
      script: cargo test --tests
      sudo: required
      services:
        - docker
      addons:
        apt:
          packages:
            - libssl-dev
      env: INTEGRATION=true
      rust: stable
      os: linux
    - <<: *integration
      rust: beta
    - <<: *integration
      rust: nightly
    - stage: lint # we lint on beta to future-proof
      name: "Rust: beta, rustfmt"
      rust: beta
      os: linux
      script:
        - rustup component add rustfmt-preview
        - cargo fmt -v -- --check
    - name: "Rust: nightly, rustfmt" # and on nightly with allow_fail
      rust: nightly
      os: linux
      script:
        - rustup component add rustfmt-preview
        - cargo fmt -v -- --check
    - name: "Rust: beta, clippy"
      rust: beta
      os: linux
      script:
        - rustup component add clippy-preview
        - touch ./src/lib.rs && cargo clippy -- -D warnings
    - name: "Rust: nightly, clippy"
      rust: nightly
      os: linux
      script:
        - rustup component add clippy-preview
        - touch ./src/lib.rs && cargo clippy -- -D warnings
    - <<: *integration
      stage: coverage
      rust: nightly
      env: CACHE_NAME=coverage INTEGRATION=true
      script:
        - RUSTFLAGS="--cfg procmacro2_semver_exempt" cargo install cargo-tarpaulin || true
        - cargo tarpaulin --out Xml
        - bash <(curl -s https://codecov.io/bash)
        - cargo clean # ensure we don't cache build for coverage
stages:
 - check
 - test
 - integration
 - lint
 - coverage

after_failure:
 - if [[ "$INTEGRATION" == "true" ]]; then docker logs (docker ps -q); fi
